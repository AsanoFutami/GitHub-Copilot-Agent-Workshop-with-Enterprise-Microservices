services:
  # Note: PostgreSQL and Redis are provided by the shared infrastructure
  # See ../.devcontainer/docker-compose.yml for shared services
  # Using external networks to connect to shared infrastructure

  # Authentication Service
  authentication-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: authentication-service
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: local
      
      # Database Configuration - using shared PostgreSQL
      DB_URL: jdbc:postgresql://host.docker.internal:5432/skishop_auth
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DDL_AUTO: update
      SHOW_SQL: "false"
      
      # Redis Configuration - using shared Redis
      REDIS_HOST: host.docker.internal
      REDIS_PORT: 6379
      
      # Azure AD Configuration (DISABLED for local)
      AZURE_TENANT_ID: "disabled-for-local"
      AZURE_CLIENT_ID: "disabled-for-local"
      AZURE_CLIENT_SECRET: "disabled-for-local"
      AZURE_APP_ID_URI: "api://disabled-for-local"
      
      # JWT Configuration
      JWT_SECRET: "test-secret-key-for-jwt-that-is-long-enough-for-hs512-algorithm-and-secure-testing-with-additional-length-to-meet-512-bit-requirement-exactly-64-chars"
      JWT_ISSUER: "SkiShop-Auth-Local"
      JWT_ACCESS_EXPIRATION: "3600"
      JWT_REFRESH_EXPIRATION: "604800"
      
      # Logging Configuration
      LOG_LEVEL: DEBUG
      SECURITY_LOG_LEVEL: DEBUG
      WEB_LOG_LEVEL: INFO
      
      # Application Configuration
      SKISHOP_AUTH_ENABLE: "false"
      SKISHOP_MFA_ENABLE: "false"
      
      # JVM Options
      JAVA_OPTS: "-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom"
      
    volumes:
      - ./logs:/app/logs
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

# Authentication Service uses shared infrastructure services
# PostgreSQL, Redis, Kafka, etc. are provided by ../.devcontainer/docker-compose.yml
# This service connects to shared services via host network
