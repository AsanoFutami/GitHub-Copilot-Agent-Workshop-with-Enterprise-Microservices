package com.skishop.ai.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * Product Recommendation Entity
 * 
 * <p>Immutable data class using Java 21's record feature</p>
 * <p>Stores product recommendations generated by AI recommendation engine</p>
 * 
 * @param recommendationId Recommendation ID (MongoDB _id)
 * @param userId User ID
 * @param productId Product ID
 * @param recommendationType Recommendation algorithm type
 * @param score Recommendation score (0.0-1.0)
 * @param reason Recommendation reason
 * @param features Features used for recommendation
 * @param relatedProducts Related product ID list
 * @param clicked Clicked flag
 * @param purchased Purchased flag
 * @param clickedAt Click timestamp
 * @param purchasedAt Purchase timestamp
 * @param createdAt Creation timestamp
 * @param expiresAt Expiration timestamp
 * 
 * @since 1.0.0
 */
@Document(collection = "product_recommendations")
public record ProductRecommendation(
    @Id
    String recommendationId,
    String userId,
    String productId,
    RecommendationType recommendationType,
    Double score,
    String reason,
    Map<String, Object> features,
    List<String> relatedProducts,
    boolean clicked,
    boolean purchased,
    LocalDateTime clickedAt,
    LocalDateTime purchasedAt,
    LocalDateTime createdAt,
    LocalDateTime expiresAt
) {
    
    /**
     * Factory method for creating new recommendation
     */
    public static ProductRecommendation create(
            String userId,
            String productId,
            RecommendationType type,
            Double score,
            String reason) {
        var now = LocalDateTime.now();
        return new ProductRecommendation(
            null, // MongoDB generates ID
            userId,
            productId,
            type,
            score,
            reason,
            Map.of(),
            List.of(),
            false,
            false,
            null,
            null,
            now,
            now.plusDays(30) // Valid for 30 days
        );
    }
    
    /**
     * Update to clicked state
     */
    public ProductRecommendation withClicked() {
        return new ProductRecommendation(
            recommendationId,
            userId,
            productId,
            recommendationType,
            score,
            reason,
            features,
            relatedProducts,
            true,
            purchased,
            LocalDateTime.now(),
            purchasedAt,
            createdAt,
            expiresAt
        );
    }
    
    /**
     * Update to purchased state
     */
    public ProductRecommendation withPurchased() {
        return new ProductRecommendation(
            recommendationId,
            userId,
            productId,
            recommendationType,
            score,
            reason,
            features,
            relatedProducts,
            clicked,
            true,
            clickedAt,
            LocalDateTime.now(),
            createdAt,
            expiresAt
        );
    }
}
